steps:
  - name: 'gcr.io/cloud-builders/mvn'
    id: Build source with Maven
    args: ['install']

  # This step builds the container image.
  - name: 'gcr.io/cloud-builders/docker'
    id: Create docker image
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/photoapp:$SHORT_SHA'
      - '.'

  # This step pushes the image to Container Registry
  # The PROJECT_ID and SHORT_SHA variables are automatically
  # replaced by Cloud Build.
  - name: 'gcr.io/cloud-builders/docker'
    id: Push docker image
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/photoapp:$SHORT_SHA'

  # This step clones the env repository
  - name: 'gcr.io/cloud-builders/gcloud'
    id: Clone env repository
    entrypoint: /bin/sh
    args:
      - '-c'
      - |
        gcloud source repos clone github_jacobbevan_photoapp-env && \
        cd github_jacobbevan_photoapp-env && \
        git checkout candidate-dev && \
        git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)')

  # This step generates the new manifest
  - name: 'gcr.io/cloud-builders/gcloud'
    id: Generate manifest
    entrypoint: /bin/sh
    args:
      - '-c'
      - |
        sed "s/GOOGLE_CLOUD_PROJECT/${PROJECT_ID}/g" kubernetes.yaml.tpl | \
        sed "s/COMMIT_SHA/${SHORT_SHA}/g" > github_jacobbevan_photoapp-env/kubernetes.yaml

  # This step pushes the manifest back to hello-cloudbuild-env
  - name: 'gcr.io/cloud-builders/gcloud'
    id: Push manifest
    entrypoint: /bin/sh
    args:
      - '-c'
      - |
        set -x && \
        cd github_jacobbevan_photoapp-env && \
        git add kubernetes.yaml && \
        git commit -m "Deploying image gcr.io/${PROJECT_ID}/photoapp:${SHORT_SHA}
        Built from commit ${COMMIT_SHA} of repository photoapp-java
        Author: $(git log --format='%an <%ae>' -n 1 HEAD)" && \
        git push origin candidate-dev

images: ['gcr.io/$PROJECT_ID/photoapp']
